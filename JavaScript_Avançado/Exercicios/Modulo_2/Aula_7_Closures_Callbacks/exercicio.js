// ========================================
// EXERC√çCIO: Closures e Callbacks
// ========================================

/*
OBJETIVO: Entender e implementar closures e callbacks em JavaScript

DESCRI√á√ÉO:
Voc√™ deve criar um sistema de gerenciamento de eventos e callbacks usando closures.
O sistema deve demonstrar como closures preservam o escopo e como callbacks
permitem programa√ß√£o ass√≠ncrona e funcional.
O sistema deve incluir:
1. Closures b√°sicas e avan√ßadas
2. Callbacks para opera√ß√µes ass√≠ncronas
3. Factory functions com closures
4. Memoiza√ß√£o com closures
5. Event handling com callbacks
6. Currying com closures

REQUISITOS:
- Implementar todas as fun√ß√µes marcadas com TODO
- Usar closures adequadamente
- Implementar callbacks corretamente
- Seguir as especifica√ß√µes de cada fun√ß√£o
*/

// ========================================
// EXERC√çCIOS
// ========================================

// EXERC√çCIO 1: Closure b√°sica
// TODO: Implementar fun√ß√£o que cria closure
function criarContador() {
  // Implemente aqui
  // Deve retornar objeto com m√©todos incrementar, decrementar, obterValor
  // Deve usar closure para preservar vari√°vel contador
}

// TODO: Implementar fun√ß√£o que cria closure com par√¢metro
function criarMultiplicador(fator) {
  // Implemente aqui
  // Deve retornar fun√ß√£o que multiplica por fator
  // Deve usar closure para preservar fator
}

// EXERC√çCIO 2: Factory functions com closures
// TODO: Implementar factory function para criar usu√°rios
function criarUsuario(nome, email) {
  // Implemente aqui
  // Deve retornar objeto com m√©todos e propriedades privadas
  // Deve usar closure para encapsular dados
}

// TODO: Implementar factory function para criar calculadora
function criarCalculadora() {
  // Implemente aqui
  // Deve retornar objeto com m√©todos de opera√ß√µes matem√°ticas
  // Deve usar closure para preservar hist√≥rico de opera√ß√µes
}

// EXERC√çCIO 3: Callbacks para opera√ß√µes ass√≠ncronas
// TODO: Implementar fun√ß√£o que simula opera√ß√£o ass√≠ncrona
function operacaoAssincrona(dados, callback) {
  // Implemente aqui
  // Deve simular delay com setTimeout
  // Deve chamar callback com resultado ou erro
}

// TODO: Implementar fun√ß√£o que processa array com callback
function processarArray(array, callback) {
  // Implemente aqui
  // Deve aplicar callback em cada elemento
  // Deve retornar novo array com resultados
}

// EXERC√çCIO 4: Event handling com callbacks
// TODO: Implementar sistema de eventos
class GerenciadorEventos {
  constructor() {
    // Implemente aqui
    // Deve inicializar propriedades para armazenar listeners
  }

  // TODO: Implementar m√©todo para adicionar listener
  adicionarListener(evento, callback) {
    // Implemente aqui
    // Deve adicionar callback para evento
    // Deve usar closure para preservar contexto
  }

  // TODO: Implementar m√©todo para remover listener
  removerListener(evento, callback) {
    // Implemente aqui
    // Deve remover callback espec√≠fico do evento
  }

  // TODO: Implementar m√©todo para disparar evento
  dispararEvento(evento, dados) {
    // Implemente aqui
    // Deve executar todos os callbacks do evento
    // Deve passar dados para callbacks
  }
}

// EXERC√çCIO 5: Memoiza√ß√£o com closures
// TODO: Implementar fun√ß√£o que memoiza resultados
function memoizar(funcao) {
  // Implemente aqui
  // Deve retornar fun√ß√£o que cacheia resultados
  // Deve usar closure para preservar cache
}

// TODO: Implementar fun√ß√£o que memoiza com tempo de expira√ß√£o
function memoizarComExpiracao(funcao, tempoExpiracao) {
  // Implemente aqui
  // Deve retornar fun√ß√£o que cacheia com expira√ß√£o
  // Deve usar closure para preservar cache e timestamps
}

// EXERC√çCIO 6: Currying com closures
// TODO: Implementar fun√ß√£o que aplica currying
function curry(funcao) {
  // Implemente aqui
  // Deve retornar fun√ß√£o que permite aplica√ß√£o parcial
  // Deve usar closure para preservar argumentos
}

// TODO: Implementar fun√ß√£o que aplica currying com argumentos fixos
function curryComArgumentos(funcao, ...argsFixos) {
  // Implemente aqui
  // Deve retornar fun√ß√£o com argumentos pr√©-definidos
  // Deve usar closure para preservar argumentos fixos
}

// EXERC√çCIO 7: Closures para encapsulamento
// TODO: Implementar m√≥dulo com closure
const moduloPrivado = (function() {
  // Implemente aqui
  // Deve criar vari√°veis privadas
  // Deve retornar objeto com m√©todos p√∫blicos
})();

// TODO: Implementar singleton com closure
function criarSingleton() {
  // Implemente aqui
  // Deve retornar fun√ß√£o que cria √∫nica inst√¢ncia
  // Deve usar closure para preservar inst√¢ncia
}

// EXERC√çCIO 8: Callbacks avan√ßados
// TODO: Implementar fun√ß√£o que executa callbacks em sequ√™ncia
function executarSequencialmente(callbacks, callbackFinal) {
  // Implemente aqui
  // Deve executar callbacks em ordem
  // Deve chamar callbackFinal com resultados
}

// TODO: Implementar fun√ß√£o que executa callbacks em paralelo
function executarParalelamente(callbacks, callbackFinal) {
  // Implemente aqui
  // Deve executar callbacks simultaneamente
  // Deve chamar callbackFinal quando todos terminarem
}

// ========================================
// FUN√á√ïES AUXILIARES
// ========================================

// Fun√ß√£o para simular delay
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Fun√ß√£o para simular opera√ß√£o que pode falhar
function operacaoComErro(sucesso = true) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (sucesso) {
        resolve("Opera√ß√£o bem-sucedida");
      } else {
        reject(new Error("Opera√ß√£o falhou"));
      }
    }, 100);
  });
}

// Fun√ß√£o para criar elemento de teste
function criarElementoTeste() {
  const elemento = document.createElement('button');
  elemento.textContent = 'Clique aqui';
  elemento.id = 'botao-teste';
  return elemento;
}

// ========================================
// TESTES
// ========================================

function executarTestes() {
  console.log("üöÄ Iniciando testes de Closures e Callbacks...\n");

  try {
    // Teste 1: Closure b√°sica
    console.log("Teste 1: Closure b√°sica");
    const contador = criarContador();
    contador.incrementar();
    contador.incrementar();
    console.log("‚úÖ Valor do contador:", contador.obterValor());
    
    const multiplicarPor2 = criarMultiplicador(2);
    console.log("‚úÖ Multiplica√ß√£o:", multiplicarPor2(5));
    console.log("");

    // Teste 2: Factory functions
    console.log("Teste 2: Factory functions");
    const usuario = criarUsuario("Jo√£o", "joao@email.com");
    console.log("‚úÖ Usu√°rio criado:", usuario.getInfo());
    
    const calculadora = criarCalculadora();
    calculadora.somar(5);
    calculadora.multiplicar(3);
    console.log("‚úÖ Resultado calculadora:", calculadora.obterResultado());
    console.log("‚úÖ Hist√≥rico:", calculadora.obterHistorico().length, "opera√ß√µes");
    console.log("");

    // Teste 3: Callbacks ass√≠ncronos
    console.log("Teste 3: Callbacks ass√≠ncronos");
    operacaoAssincrona("dados de teste", (resultado, erro) => {
      if (erro) {
        console.log("‚ùå Erro:", erro.message);
      } else {
        console.log("‚úÖ Resultado:", resultado);
      }
    });
    
    const numeros = [1, 2, 3, 4, 5];
    const dobros = processarArray(numeros, (num) => num * 2);
    console.log("‚úÖ Array processado:", dobros);
    console.log("");

    // Teste 4: Event handling
    console.log("Teste 4: Event handling");
    const gerenciador = new GerenciadorEventos();
    
    gerenciador.adicionarListener('click', (dados) => {
      console.log("‚úÖ Evento click capturado:", dados);
    });
    
    gerenciador.dispararEvento('click', { x: 100, y: 200 });
    console.log("");

    // Teste 5: Memoiza√ß√£o
    console.log("Teste 5: Memoiza√ß√£o");
    const calcularQuadrado = (n) => n * n;
    const calcularQuadradoMemoizado = memoizar(calcularQuadrado);
    
    console.log("‚úÖ Primeira chamada:", calcularQuadradoMemoizado(5));
    console.log("‚úÖ Segunda chamada (cache):", calcularQuadradoMemoizado(5));
    console.log("");

    // Teste 6: Currying
    console.log("Teste 6: Currying");
    const somar = (a, b, c) => a + b + c;
    const somarCurried = curry(somar);
    const somarCom5 = somarCurried(5);
    const somarCom5e3 = somarCom5(3);
    
    console.log("‚úÖ Soma curried:", somarCom5e3(2));
    console.log("");

    // Teste 7: M√≥dulo privado
    console.log("Teste 7: M√≥dulo privado");
    console.log("‚úÖ M√©todo p√∫blico:", moduloPrivado.metodoPublico());
    console.log("‚úÖ Dados privados n√£o acess√≠veis externamente");
    console.log("");

    // Teste 8: Callbacks avan√ßados
    console.log("Teste 8: Callbacks avan√ßados");
    const callbacks = [
      () => Promise.resolve("Resultado 1"),
      () => Promise.resolve("Resultado 2"),
      () => Promise.resolve("Resultado 3")
    ];
    
    executarSequencialmente(callbacks, (resultados) => {
      console.log("‚úÖ Resultados sequenciais:", resultados);
    });
    console.log("");

    console.log("üéâ Todos os testes passaram!");

  } catch (erro) {
    console.error("‚ùå Erro nos testes:", erro.message);
  }
}

// Executar testes se o arquivo for executado diretamente
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    criarContador,
    criarMultiplicador,
    criarUsuario,
    criarCalculadora,
    operacaoAssincrona,
    processarArray,
    GerenciadorEventos,
    memoizar,
    memoizarComExpiracao,
    curry,
    curryComArgumentos,
    moduloPrivado,
    criarSingleton,
    executarSequencialmente,
    executarParalelamente
  };
} else {
  // Executar testes no navegador
  executarTestes();
} 