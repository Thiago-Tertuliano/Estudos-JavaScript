// ========================================
// EXERC√çCIO: Getters e Setters
// ========================================

/*
OBJETIVO: Implementar classes com encapsulamento usando getters e setters

DESCRI√á√ÉO:
Voc√™ deve criar um sistema de gerenciamento de produtos e contas banc√°rias
usando classes com getters e setters para encapsulamento adequado.
O sistema deve incluir:
1. Classes com propriedades privadas
2. Getters para acesso controlado
3. Setters com valida√ß√£o
4. Propriedades calculadas
5. Controle de acesso adequado

REQUISITOS:
- Implementar todas as classes marcadas com TODO
- Usar getters e setters adequadamente
- Implementar valida√ß√µes apropriadas
- Seguir as especifica√ß√µes de cada classe
*/

// ========================================
// EXERC√çCIOS
// ========================================

// EXERC√çCIO 1: Classe Produto com encapsulamento b√°sico
// TODO: Implementar classe Produto com getters e setters
class Produto {
  constructor(nome, preco, estoque) {
    // Implemente aqui
    // Deve inicializar propriedades privadas
    // Deve incluir valida√ß√µes b√°sicas
  }

  // TODO: Implementar getters e setters
  // get nome() { }
  // set nome(novoNome) { }
  // get preco() { }
  // set preco(novoPreco) { }
  // get estoque() { }
  // set estoque(novoEstoque) { }

  // TODO: Implementar getter calculado para pre√ßo com desconto
  // get precoComDesconto() { }

  // TODO: Implementar m√©todo para aplicar desconto
  aplicarDesconto(percentual) {
    // Implemente aqui
    // Deve aplicar desconto ao pre√ßo
    // Deve validar percentual (entre 0 e 100)
  }
}

// EXERC√çCIO 2: Classe ContaBancaria com controle avan√ßado
// TODO: Implementar classe ContaBancaria com getters e setters
class ContaBancaria {
  constructor(titular, saldoInicial = 0) {
    // Implemente aqui
    // Deve inicializar propriedades privadas
    // Deve incluir hist√≥rico de transa√ß√µes
  }

  // TODO: Implementar getters e setters com valida√ß√µes
  // get titular() { }
  // set titular(novoTitular) { }
  // get saldo() { }
  // set saldo(novoSaldo) { } // Deve lan√ßar erro - saldo s√≥ pode ser modificado via m√©todos
  // get limite() { }
  // set limite(novoLimite) { }
  // get historico() { } // Deve retornar c√≥pia do hist√≥rico

  // TODO: Implementar m√©todos de opera√ß√£o
  depositar(valor) {
    // Implemente aqui
    // Deve validar valor positivo
    // Deve adicionar ao saldo
    // Deve registrar no hist√≥rico
  }

  sacar(valor) {
    // Implemente aqui
    // Deve validar valor e saldo dispon√≠vel
    // Deve subtrair do saldo
    // Deve registrar no hist√≥rico
  }

  // TODO: Implementar getter calculado para saldo dispon√≠vel
  // get saldoDisponivel() { }
}

// EXERC√çCIO 3: Classe Retangulo com propriedades calculadas
// TODO: Implementar classe Retangulo com getters e setters
class Retangulo {
  constructor(largura, altura) {
    // Implemente aqui
    // Deve inicializar propriedades privadas
    // Deve validar dimens√µes positivas
  }

  // TODO: Implementar getters e setters
  // get largura() { }
  // set largura(novaLargura) { }
  // get altura() { }
  // set altura(novaAltura) { }

  // TODO: Implementar getters calculados
  // get area() { }
  // get perimetro() { }
  // get ehQuadrado() { }
}

// EXERC√çCIO 4: Classe Usuario com valida√ß√µes complexas
// TODO: Implementar classe Usuario com getters e setters
class Usuario {
  constructor(nome, email, idade) {
    // Implemente aqui
    // Deve inicializar propriedades privadas
    // Deve incluir valida√ß√µes de email e idade
  }

  // TODO: Implementar getters e setters com valida√ß√µes
  // get nome() { }
  // set nome(novoNome) { }
  // get email() { }
  // set email(novoEmail) { }
  // get idade() { }
  // set idade(novaIdade) { }

  // TODO: Implementar getters calculados
  // get ehMaiorDeIdade() { }
  // get inicialNome() { }
  // get emailDominio() { }
}

// EXERC√çCIO 5: Classe CarrinhoCompras com l√≥gica de neg√≥cio
// TODO: Implementar classe CarrinhoCompras
class CarrinhoCompras {
  constructor() {
    // Implemente aqui
    // Deve inicializar propriedades privadas
    // Deve incluir array de itens e configura√ß√µes
  }

  // TODO: Implementar getters e setters
  // get itens() { } // Deve retornar c√≥pia do array
  // get quantidadeItens() { }
  // get total() { }
  // get estaVazio() { }

  // TODO: Implementar m√©todos de manipula√ß√£o
  adicionarItem(produto, quantidade = 1) {
    // Implemente aqui
    // Deve validar produto e quantidade
    // Deve adicionar ou atualizar item no carrinho
  }

  removerItem(idProduto) {
    // Implemente aqui
    // Deve remover item do carrinho
  }

  limparCarrinho() {
    // Implemente aqui
    // Deve limpar todos os itens
  }

  // TODO: Implementar getter calculado para desconto
  // get descontoAplicavel() { }
}

// ========================================
// TESTES
// ========================================

function executarTestes() {
  console.log("üöÄ Iniciando testes de Getters e Setters...\n");

  try {
    // Teste 1: Classe Produto
    console.log("Teste 1: Classe Produto");
    const produto = new Produto("Notebook", 2500, 10);
    console.log("‚úÖ Produto criado:", produto.nome);
    console.log("‚úÖ Pre√ßo:", produto.preco);
    console.log("‚úÖ Estoque:", produto.estoque);
    
    produto.aplicarDesconto(10);
    console.log("‚úÖ Pre√ßo com desconto:", produto.precoComDesconto);
    console.log("");

    // Teste 2: Classe ContaBancaria
    console.log("Teste 2: Classe ContaBancaria");
    const conta = new ContaBancaria("Jo√£o Silva", 1000);
    console.log("‚úÖ Titular:", conta.titular);
    console.log("‚úÖ Saldo inicial:", conta.saldo);
    
    conta.depositar(500);
    console.log("‚úÖ Saldo ap√≥s dep√≥sito:", conta.saldo);
    
    conta.sacar(200);
    console.log("‚úÖ Saldo ap√≥s saque:", conta.saldo);
    console.log("‚úÖ Hist√≥rico:", conta.historico.length, "transa√ß√µes");
    console.log("");

    // Teste 3: Classe Retangulo
    console.log("Teste 3: Classe Retangulo");
    const retangulo = new Retangulo(5, 3);
    console.log("‚úÖ Largura:", retangulo.largura);
    console.log("‚úÖ Altura:", retangulo.altura);
    console.log("‚úÖ √Årea:", retangulo.area);
    console.log("‚úÖ Per√≠metro:", retangulo.perimetro);
    console.log("‚úÖ √â quadrado:", retangulo.ehQuadrado);
    console.log("");

    // Teste 4: Classe Usuario
    console.log("Teste 4: Classe Usuario");
    const usuario = new Usuario("Maria Silva", "maria@email.com", 25);
    console.log("‚úÖ Nome:", usuario.nome);
    console.log("‚úÖ Email:", usuario.email);
    console.log("‚úÖ Idade:", usuario.idade);
    console.log("‚úÖ √â maior de idade:", usuario.ehMaiorDeIdade);
    console.log("‚úÖ Inicial do nome:", usuario.inicialNome);
    console.log("‚úÖ Dom√≠nio do email:", usuario.emailDominio);
    console.log("");

    // Teste 5: Classe CarrinhoCompras
    console.log("Teste 5: Classe CarrinhoCompras");
    const carrinho = new CarrinhoCompras();
    const produto1 = new Produto("Mouse", 50, 5);
    const produto2 = new Produto("Teclado", 120, 3);
    
    carrinho.adicionarItem(produto1, 2);
    carrinho.adicionarItem(produto2, 1);
    
    console.log("‚úÖ Quantidade de itens:", carrinho.quantidadeItens);
    console.log("‚úÖ Total:", carrinho.total);
    console.log("‚úÖ Est√° vazio:", carrinho.estaVazio);
    console.log("");

    console.log("üéâ Todos os testes passaram!");

  } catch (erro) {
    console.error("‚ùå Erro nos testes:", erro.message);
  }
}

// Executar testes se o arquivo for executado diretamente
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    Produto,
    ContaBancaria,
    Retangulo,
    Usuario,
    CarrinhoCompras
  };
} else {
  // Executar testes no navegador
  executarTestes();
} 