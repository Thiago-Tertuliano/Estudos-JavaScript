// ========================================
// EXERC√çCIO: Fun√ß√µes de Alta Ordem
// ========================================

/*
OBJETIVO: Implementar fun√ß√µes de alta ordem para processamento de dados

DESCRI√á√ÉO:
Voc√™ deve criar um sistema de processamento de dados usando fun√ß√µes de alta ordem.
O sistema deve incluir:
1. Fun√ß√µes que recebem outras fun√ß√µes como par√¢metros
2. Fun√ß√µes que retornam outras fun√ß√µes
3. Composi√ß√£o de fun√ß√µes
4. Currying e aplica√ß√£o parcial

REQUISITOS:
- Implementar todas as fun√ß√µes marcadas com TODO
- Usar fun√ß√µes de alta ordem adequadamente
- Implementar currying onde especificado
- Seguir as especifica√ß√µes de cada fun√ß√£o
*/

// ========================================
// DADOS DE EXEMPLO
// ========================================

const produtos = [
  { id: 1, nome: "Notebook", preco: 2500, categoria: "eletronicos", estoque: 10 },
  { id: 2, nome: "Mouse", preco: 50, categoria: "eletronicos", estoque: 25 },
  { id: 3, nome: "Teclado", preco: 120, categoria: "eletronicos", estoque: 15 },
  { id: 4, nome: "Livro JavaScript", preco: 80, categoria: "livros", estoque: 8 },
  { id: 5, nome: "Caf√©", preco: 15, categoria: "bebidas", estoque: 100 },
  { id: 6, nome: "√Ågua", preco: 5, categoria: "bebidas", estoque: 200 },
  { id: 7, nome: "Cadeira", preco: 300, categoria: "mobiliario", estoque: 5 },
  { id: 8, nome: "Mesa", preco: 500, categoria: "mobiliario", estoque: 3 }
];

const usuarios = [
  { id: 1, nome: "Jo√£o", idade: 25, cidade: "S√£o Paulo", ativo: true },
  { id: 2, nome: "Maria", idade: 30, cidade: "Rio de Janeiro", ativo: true },
  { id: 3, nome: "Pedro", idade: 22, cidade: "Belo Horizonte", ativo: false },
  { id: 4, nome: "Ana", idade: 28, cidade: "S√£o Paulo", ativo: true },
  { id: 5, nome: "Carlos", idade: 35, cidade: "Salvador", ativo: false }
];

// ========================================
// EXERC√çCIOS
// ========================================

// EXERC√çCIO 1: Fun√ß√£o que recebe fun√ß√£o como par√¢metro
// TODO: Implementar fun√ß√£o que aplica uma transforma√ß√£o em cada elemento
function mapear(array, transformacao) {
  // Implemente aqui
  // Deve aplicar a fun√ß√£o transformacao em cada elemento do array
  // Deve retornar um novo array com os resultados
}

// EXERC√çCIO 2: Fun√ß√£o que filtra elementos
// TODO: Implementar fun√ß√£o que filtra elementos baseado em uma condi√ß√£o
function filtrar(array, condicao) {
  // Implemente aqui
  // Deve retornar um novo array com elementos que atendem √† condi√ß√£o
  // condicao √© uma fun√ß√£o que retorna true/false para cada elemento
}

// EXERC√çCIO 3: Fun√ß√£o que reduz elementos
// TODO: Implementar fun√ß√£o que reduz um array a um √∫nico valor
function reduzir(array, funcao, valorInicial) {
  // Implemente aqui
  // Deve aplicar a fun√ß√£o em cada elemento, acumulando o resultado
  // Deve usar valorInicial como valor inicial do acumulador
}

// EXERC√çCIO 4: Fun√ß√£o que retorna fun√ß√£o (Factory Function)
// TODO: Implementar fun√ß√£o que cria filtros espec√≠ficos
function criarFiltro(campo, valor) {
  // Implemente aqui
  // Deve retornar uma fun√ß√£o que filtra objetos pelo campo e valor especificados
  // Exemplo: criarFiltro('categoria', 'eletronicos') deve retornar uma fun√ß√£o
  // que filtra produtos pela categoria 'eletronicos'
}

// EXERC√çCIO 5: Currying
// TODO: Implementar fun√ß√£o com currying para opera√ß√µes matem√°ticas
function curry(funcao) {
  // Implemente aqui
  // Deve implementar currying para qualquer fun√ß√£o
  // Deve permitir chamadas parciais da fun√ß√£o
}

// EXERC√çCIO 6: Composi√ß√£o de fun√ß√µes
// TODO: Implementar fun√ß√£o que comp√µe m√∫ltiplas fun√ß√µes
function compor(...funcoes) {
  // Implemente aqui
  // Deve retornar uma fun√ß√£o que aplica todas as fun√ß√µes em sequ√™ncia
  // A sa√≠da de uma fun√ß√£o deve ser a entrada da pr√≥xima
}

// EXERC√çCIO 7: Fun√ß√£o que mede performance
// TODO: Implementar decorator que mede o tempo de execu√ß√£o
function medirTempo(funcao) {
  // Implemente aqui
  // Deve retornar uma fun√ß√£o que executa a fun√ß√£o original
  // Deve medir e logar o tempo de execu√ß√£o
}

// EXERC√çCIO 8: Fun√ß√£o que implementa cache
// TODO: Implementar fun√ß√£o que cacheia resultados
function cache(funcao) {
  // Implemente aqui
  // Deve retornar uma fun√ß√£o que cacheia resultados baseado nos argumentos
  // Deve evitar rec√°lculos desnecess√°rios
}

// ========================================
// FUN√á√ïES AUXILIARES
// ========================================

// Fun√ß√µes de transforma√ß√£o para teste
const dobrarPreco = produto => ({ ...produto, preco: produto.preco * 2 });
const adicionarImposto = produto => ({ ...produto, preco: produto.preco * 1.1 });
const formatarNome = produto => ({ ...produto, nome: produto.nome.toUpperCase() });

// Fun√ß√µes de condi√ß√£o para teste
const ehEletronico = produto => produto.categoria === 'eletronicos';
const temEstoque = produto => produto.estoque > 0;
const precoAlto = produto => produto.preco > 100;

// Fun√ß√µes matem√°ticas para teste
const somar = (a, b) => a + b;
const multiplicar = (a, b) => a * b;

// ========================================
// TESTES
// ========================================

function executarTestes() {
  console.log("üöÄ Iniciando testes de Fun√ß√µes de Alta Ordem...\n");

  try {
    // Teste 1: Mapeamento
    console.log("Teste 1: Mapeamento");
    const precosDobrados = mapear(produtos, dobrarPreco);
    console.log("‚úÖ Produtos com pre√ßos dobrados:", precosDobrados.length);
    console.log("");

    // Teste 2: Filtragem
    console.log("Teste 2: Filtragem");
    const eletronicos = filtrar(produtos, ehEletronico);
    console.log("‚úÖ Eletr√¥nicos encontrados:", eletronicos.length);
    console.log("");

    // Teste 3: Redu√ß√£o
    console.log("Teste 3: Redu√ß√£o");
    const totalPrecos = reduzir(produtos, (acc, produto) => acc + produto.preco, 0);
    console.log("‚úÖ Total dos pre√ßos:", totalPrecos);
    console.log("");

    // Teste 4: Factory Function
    console.log("Teste 4: Factory Function");
    const filtrarEletronicos = criarFiltro('categoria', 'eletronicos');
    const eletronicosFiltrados = filtrar(produtos, filtrarEletronicos);
    console.log("‚úÖ Eletr√¥nicos filtrados:", eletronicosFiltrados.length);
    console.log("");

    // Teste 5: Currying
    console.log("Teste 5: Currying");
    const somarCurried = curry(somar);
    const somarCom5 = somarCurried(5);
    console.log("‚úÖ Soma com 5:", somarCom5(3)); // Deve ser 8
    console.log("");

    // Teste 6: Composi√ß√£o
    console.log("Teste 6: Composi√ß√£o");
    const processarProduto = compor(formatarNome, adicionarImposto, dobrarPreco);
    const produtoProcessado = processarProduto(produtos[0]);
    console.log("‚úÖ Produto processado:", produtoProcessado.nome);
    console.log("");

    // Teste 7: Medi√ß√£o de tempo
    console.log("Teste 7: Medi√ß√£o de tempo");
    const filtrarComTempo = medirTempo(filtrar);
    const resultado = filtrarComTempo(produtos, ehEletronico);
    console.log("‚úÖ Filtragem com tempo medida");
    console.log("");

    // Teste 8: Cache
    console.log("Teste 8: Cache");
    const calcularQuadrado = (n) => n * n;
    const calcularQuadradoComCache = cache(calcularQuadrado);
    console.log("‚úÖ Primeira chamada:", calcularQuadradoComCache(5));
    console.log("‚úÖ Segunda chamada (cache):", calcularQuadradoComCache(5));
    console.log("");

    console.log("üéâ Todos os testes passaram!");

  } catch (erro) {
    console.error("‚ùå Erro nos testes:", erro.message);
  }
}

// Executar testes se o arquivo for executado diretamente
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    mapear,
    filtrar,
    reduzir,
    criarFiltro,
    curry,
    compor,
    medirTempo,
    cache
  };
} else {
  // Executar testes no navegador
  executarTestes();
} 