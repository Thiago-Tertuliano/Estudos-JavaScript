// ========================================
// EXERC√çCIO: Classes Modernas
// ========================================

/*
OBJETIVO: Dominar o uso de classes ES6 e recursos modernos de JavaScript

DESCRI√á√ÉO:
Voc√™ deve criar um sistema de gerenciamento de biblioteca usando classes ES6 modernas.
O sistema deve demonstrar recursos avan√ßados como campos privados, m√©todos est√°ticos,
getters/setters, heran√ßa de classes e decorators.
O sistema deve incluir:
1. Classes com campos privados e p√∫blicos
2. Heran√ßa de classes
3. M√©todos est√°ticos e de inst√¢ncia
4. Getters e setters
5. Composi√ß√£o de classes
6. Decorators e metaprograma√ß√£o

REQUISITOS:
- Implementar todas as classes marcadas com TODO
- Usar recursos modernos de classes ES6
- Implementar heran√ßa adequadamente
- Seguir as especifica√ß√µes de cada classe
*/

// ========================================
// EXERC√çCIOS
// ========================================

// EXERC√çCIO 1: Classe b√°sica com campos privados
// TODO: Implementar classe Livro com campos privados
class Livro {
  // TODO: Declarar campos privados
  // Deve incluir #id, #titulo, #autor, #isbn, #ano, #disponivel

  constructor(id, titulo, autor, isbn, ano) {
    // Implemente aqui
    // Deve inicializar campos privados
    // Deve incluir valida√ß√µes b√°sicas
  }

  // TODO: Implementar getters e setters
  // get id() { }
  // get titulo() { }
  // set titulo(novoTitulo) { }
  // get autor() { }
  // set autor(novoAutor) { }
  // get isbn() { }
  // get ano() { }
  // get disponivel() { }

  // TODO: Implementar m√©todos de inst√¢ncia
  emprestar() {
    // Implemente aqui
    // Deve marcar livro como emprestado
    // Deve retornar confirma√ß√£o
  }

  devolver() {
    // Implemente aqui
    // Deve marcar livro como dispon√≠vel
    // Deve retornar confirma√ß√£o
  }

  getInfo() {
    // Implemente aqui
    // Deve retornar informa√ß√µes formatadas do livro
  }

  // TODO: Implementar m√©todo est√°tico
  static validarISBN(isbn) {
    // Implemente aqui
    // Deve validar formato de ISBN
    // Deve retornar true/false
  }
}

// EXERC√çCIO 2: Heran√ßa de classes - LivroDigital
// TODO: Implementar classe LivroDigital que herda de Livro
class LivroDigital extends Livro {
  // TODO: Declarar campos privados espec√≠ficos
  // Deve incluir #formato, #tamanhoArquivo, #url

  constructor(id, titulo, autor, isbn, ano, formato, tamanhoArquivo, url) {
    // Implemente aqui
    // Deve chamar super() com par√¢metros do pai
    // Deve inicializar campos espec√≠ficos
  }

  // TODO: Implementar getters espec√≠ficos
  // get formato() { }
  // get tamanhoArquivo() { }
  // get url() { }

  // TODO: Implementar m√©todos espec√≠ficos
  baixar() {
    // Implemente aqui
    // Deve simular download do arquivo
    // Deve retornar confirma√ß√£o
  }

  getInfo() {
    // Implemente aqui
    // Deve sobrescrever m√©todo do pai
    // Deve incluir informa√ß√µes espec√≠ficas do livro digital
  }

  // TODO: Implementar m√©todo est√°tico espec√≠fico
  static validarFormato(formato) {
    // Implemente aqui
    // Deve validar formatos aceitos (PDF, EPUB, MOBI)
    // Deve retornar true/false
  }
}

// EXERC√çCIO 3: Classe com composi√ß√£o - Usuario
// TODO: Implementar classe Usuario com composi√ß√£o
class Usuario {
  // TODO: Declarar campos privados
  // Deve incluir #id, #nome, #email, #livrosEmprestados

  constructor(id, nome, email) {
    // Implemente aqui
    // Deve inicializar campos privados
    // Deve incluir valida√ß√µes
  }

  // TODO: Implementar getters e setters
  // get id() { }
  // get nome() { }
  // set nome(novoNome) { }
  // get email() { }
  // set email(novoEmail) { }
  // get livrosEmprestados() { }

  // TODO: Implementar m√©todos de gerenciamento
  emprestarLivro(livro) {
    // Implemente aqui
    // Deve adicionar livro √† lista de emprestados
    // Deve verificar se livro est√° dispon√≠vel
    // Deve marcar livro como emprestado
  }

  devolverLivro(livro) {
    // Implemente aqui
    // Deve remover livro da lista de emprestados
    // Deve marcar livro como dispon√≠vel
  }

  getInfo() {
    // Implemente aqui
    // Deve retornar informa√ß√µes formatadas do usu√°rio
  }

  // TODO: Implementar m√©todo est√°tico
  static validarEmail(email) {
    // Implemente aqui
    // Deve validar formato de email
    // Deve retornar true/false
  }
}

// EXERC√çCIO 4: Classe com m√©todos avan√ßados - Biblioteca
// TODO: Implementar classe Biblioteca
class Biblioteca {
  // TODO: Declarar campos privados
  // Deve incluir #nome, #livros, #usuarios, #emprestimos

  constructor(nome) {
    // Implemente aqui
    // Deve inicializar campos privados
  }

  // TODO: Implementar getters
  // get nome() { }
  // get livros() { }
  // get usuarios() { }
  // get emprestimos() { }

  // TODO: Implementar m√©todos de gerenciamento
  adicionarLivro(livro) {
    // Implemente aqui
    // Deve adicionar livro √† biblioteca
    // Deve verificar se livro j√° existe
  }

  removerLivro(id) {
    // Implemente aqui
    // Deve remover livro da biblioteca
    // Deve verificar se livro est√° emprestado
  }

  adicionarUsuario(usuario) {
    // Implemente aqui
    // Deve adicionar usu√°rio √† biblioteca
    // Deve verificar se usu√°rio j√° existe
  }

  emprestarLivro(idLivro, idUsuario) {
    // Implemente aqui
    // Deve emprestar livro para usu√°rio
    // Deve registrar empr√©stimo
    // Deve verificar disponibilidade
  }

  devolverLivro(idLivro, idUsuario) {
    // Implemente aqui
    // Deve devolver livro
    // Deve remover registro de empr√©stimo
  }

  // TODO: Implementar m√©todos de consulta
  buscarLivro(criterio) {
    // Implemente aqui
    // Deve buscar livro por t√≠tulo, autor ou ISBN
    // Deve retornar array de livros encontrados
  }

  buscarUsuario(id) {
    // Implemente aqui
    // Deve buscar usu√°rio por ID
    // Deve retornar usu√°rio ou null
  }

  getRelatorio() {
    // Implemente aqui
    // Deve retornar relat√≥rio da biblioteca
    // Deve incluir estat√≠sticas
  }

  // TODO: Implementar m√©todo est√°tico
  static criarBiblioteca(nome) {
    // Implemente aqui
    // Deve criar nova inst√¢ncia de biblioteca
    // Deve retornar inst√¢ncia configurada
  }
}

// EXERC√çCIO 5: Classe abstrata e interface - ItemBiblioteca
// TODO: Implementar classe abstrata ItemBiblioteca
class ItemBiblioteca {
  constructor(id, titulo, tipo) {
    // Implemente aqui
    // Deve inicializar propriedades b√°sicas
    // Deve incluir valida√ß√µes
  }

  // TODO: Implementar m√©todo abstrato
  getInfo() {
    // Implemente aqui
    // Deve ser sobrescrito pelas subclasses
    throw new Error('M√©todo getInfo deve ser implementado pela subclasse');
  }

  // TODO: Implementar m√©todo est√°tico
  static getTipos() {
    // Implemente aqui
    // Deve retornar array com tipos dispon√≠veis
  }
}

// EXERC√çCIO 6: Classe com decorators - Auditoria
// TODO: Implementar decorator para auditoria
function auditar(target, propertyKey, descriptor) {
  // Implemente aqui
  // Deve registrar chamadas de m√©todos
  // Deve preservar funcionalidade original
}

// TODO: Implementar classe com decorators
class BibliotecaAuditada extends Biblioteca {
  constructor(nome) {
    // Implemente aqui
    // Deve chamar super()
  }

  // TODO: Aplicar decorator aos m√©todos
  @auditar
  emprestarLivro(idLivro, idUsuario) {
    // Implemente aqui
    // Deve chamar m√©todo do pai
    // Deve ser auditado
  }

  @auditar
  devolverLivro(idLivro, idUsuario) {
    // Implemente aqui
    // Deve chamar m√©todo do pai
    // Deve ser auditado
  }
}

// EXERC√çCIO 7: Classe com Symbol - Configuracoes
// TODO: Implementar classe com Symbol para propriedades privadas
class ConfiguracoesBiblioteca {
  // TODO: Declarar Symbols para propriedades privadas
  // Deve usar Symbol() para criar propriedades √∫nicas

  constructor() {
    // Implemente aqui
    // Deve inicializar configura√ß√µes usando Symbols
  }

  // TODO: Implementar m√©todos de acesso
  getConfiguracao(chave) {
    // Implemente aqui
    // Deve retornar valor da configura√ß√£o
  }

  setConfiguracao(chave, valor) {
    // Implemente aqui
    // Deve definir valor da configura√ß√£o
  }

  getTodasConfiguracoes() {
    // Implemente aqui
    // Deve retornar objeto com todas as configura√ß√µes
  }
}

// EXERC√çCIO 8: Classe com Proxy - BibliotecaProxy
// TODO: Implementar classe que usa Proxy
class BibliotecaProxy {
  constructor(biblioteca) {
    // Implemente aqui
    // Deve criar proxy para biblioteca
    // Deve interceptar opera√ß√µes
  }

  // TODO: Implementar m√©todos que usam Proxy
  getLivro(id) {
    // Implemente aqui
    // Deve usar Proxy para interceptar acesso
    // Deve registrar acesso
  }

  setLivro(id, livro) {
    // Implemente aqui
    // Deve usar Proxy para interceptar modifica√ß√£o
    // Deve registrar modifica√ß√£o
  }
}

// ========================================
// FUN√á√ïES AUXILIARES
// ========================================

// Fun√ß√£o para simular delay
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Fun√ß√£o para validar dados
function validarDados(dados, regras) {
  for (const [campo, validacao] of Object.entries(regras)) {
    if (!validacao(dados[campo])) {
      throw new Error(`Campo ${campo} inv√°lido`);
    }
  }
  return true;
}

// ========================================
// TESTES
// ========================================

function executarTestes() {
  console.log("üöÄ Iniciando testes de Classes Modernas...\n");

  try {
    // Teste 1: Classe b√°sica
    console.log("Teste 1: Classe b√°sica");
    const livro = new Livro(1, "JavaScript Avan√ßado", "Jo√£o Silva", "978-1234567890", 2023);
    console.log("‚úÖ Livro criado:", livro.getInfo());
    console.log("‚úÖ ISBN v√°lido:", Livro.validarISBN("978-1234567890"));
    console.log("");

    // Teste 2: Heran√ßa
    console.log("Teste 2: Heran√ßa");
    const livroDigital = new LivroDigital(2, "Python B√°sico", "Maria Santos", "978-0987654321", 2022, "PDF", "2.5MB", "https://exemplo.com/livro.pdf");
    console.log("‚úÖ Livro digital criado:", livroDigital.getInfo());
    console.log("‚úÖ Formatos v√°lidos:", LivroDigital.validarFormato("PDF"));
    console.log("‚úÖ Verificando heran√ßa:", livroDigital instanceof Livro);
    console.log("");

    // Teste 3: Composi√ß√£o
    console.log("Teste 3: Composi√ß√£o");
    const usuario = new Usuario(1, "Pedro Alves", "pedro@email.com");
    console.log("‚úÖ Usu√°rio criado:", usuario.getInfo());
    console.log("‚úÖ Email v√°lido:", Usuario.validarEmail("pedro@email.com"));
    console.log("");

    // Teste 4: Biblioteca
    console.log("Teste 4: Biblioteca");
    const biblioteca = new Biblioteca("Biblioteca Central");
    biblioteca.adicionarLivro(livro);
    biblioteca.adicionarLivro(livroDigital);
    biblioteca.adicionarUsuario(usuario);
    console.log("‚úÖ Biblioteca criada:", biblioteca.nome);
    console.log("‚úÖ Livros na biblioteca:", biblioteca.livros.length);
    console.log("");

    // Teste 5: Empr√©stimos
    console.log("Teste 5: Empr√©stimos");
    biblioteca.emprestarLivro(1, 1);
    console.log("‚úÖ Livro emprestado");
    console.log("‚úÖ Empr√©stimos ativos:", biblioteca.emprestimos.length);
    biblioteca.devolverLivro(1, 1);
    console.log("‚úÖ Livro devolvido");
    console.log("");

    // Teste 6: Busca
    console.log("Teste 6: Busca");
    const livrosEncontrados = biblioteca.buscarLivro("JavaScript");
    console.log("‚úÖ Livros encontrados:", livrosEncontrados.length);
    const usuarioEncontrado = biblioteca.buscarUsuario(1);
    console.log("‚úÖ Usu√°rio encontrado:", usuarioEncontrado?.nome);
    console.log("");

    // Teste 7: Relat√≥rio
    console.log("Teste 7: Relat√≥rio");
    const relatorio = biblioteca.getRelatorio();
    console.log("‚úÖ Relat√≥rio gerado:", relatorio);
    console.log("");

    // Teste 8: Configura√ß√µes
    console.log("Teste 8: Configura√ß√µes");
    const config = new ConfiguracoesBiblioteca();
    config.setConfiguracao('maxEmprestimos', 5);
    config.setConfiguracao('diasEmprestimo', 15);
    console.log("‚úÖ Configura√ß√µes definidas:", config.getTodasConfiguracoes());
    console.log("");

    console.log("üéâ Todos os testes passaram!");

  } catch (erro) {
    console.error("‚ùå Erro nos testes:", erro.message);
  }
}

// Executar testes se o arquivo for executado diretamente
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    Livro,
    LivroDigital,
    Usuario,
    Biblioteca,
    ItemBiblioteca,
    auditar,
    BibliotecaAuditada,
    ConfiguracoesBiblioteca,
    BibliotecaProxy
  };
} else {
  // Executar testes no navegador
  executarTestes();
} 