// ========================================
// EXERC√çCIO: Contexto This
// ========================================

/*
OBJETIVO: Entender e manipular o contexto 'this' em JavaScript

DESCRI√á√ÉO:
Voc√™ deve implementar um sistema de gerenciamento de eventos e callbacks
que demonstra diferentes contextos do 'this' e como manipul√°-los.
O sistema deve incluir:
1. Diferentes contextos do 'this'
2. M√©todos de binding (bind, call, apply)
3. Arrow functions e contexto l√©xico
4. Manipula√ß√£o de eventos

REQUISITOS:
- Implementar todas as fun√ß√µes marcadas com TODO
- Entender diferentes contextos do 'this'
- Usar bind, call, apply adequadamente
- Seguir as especifica√ß√µes de cada fun√ß√£o
*/

// ========================================
// EXERC√çCIOS
// ========================================

// EXERC√çCIO 1: Contexto b√°sico do 'this'
// TODO: Implementar fun√ß√£o que demonstra contexto do 'this'
function demonstrarContexto() {
  // Implemente aqui
  // Deve criar um objeto com m√©todo que usa 'this'
  // Deve demonstrar como o contexto muda em diferentes situa√ß√µes
  // Deve retornar informa√ß√µes sobre o contexto atual
}

// EXERC√çCIO 2: Binding de m√©todos
// TODO: Implementar fun√ß√£o que usa bind para preservar contexto
function criarMetodoComBind() {
  // Implemente aqui
  // Deve criar um m√©todo que usa 'this'
  // Deve usar bind para preservar o contexto
  // Deve retornar o m√©todo bound
}

// EXERC√çCIO 3: Call e Apply
// TODO: Implementar fun√ß√£o que demonstra call e apply
function demonstrarCallApply() {
  // Implemente aqui
  // Deve criar uma fun√ß√£o que usa 'this'
  // Deve demonstrar uso de call() e apply()
  // Deve retornar resultados das chamadas
}

// EXERC√çCIO 4: Arrow functions e contexto l√©xico
// TODO: Implementar fun√ß√£o que compara arrow functions com fun√ß√µes normais
function compararArrowFunction() {
  // Implemente aqui
  // Deve criar fun√ß√£o normal e arrow function
  // Deve demonstrar diferen√ßa no contexto do 'this'
  // Deve retornar compara√ß√£o dos contextos
}

// EXERC√çCIO 5: Manipula√ß√£o de eventos
// TODO: Implementar sistema de eventos com contexto correto
class GerenciadorEventos {
  constructor() {
    // Implemente aqui
    // Deve inicializar propriedades necess√°rias
  }

  // TODO: Implementar m√©todo que adiciona listener
  adicionarListener(evento, callback) {
    // Implemente aqui
    // Deve adicionar event listener
    // Deve preservar contexto do callback
  }

  // TODO: Implementar m√©todo que remove listener
  removerListener(evento, callback) {
    // Implemente aqui
    // Deve remover event listener
  }

  // TODO: Implementar m√©todo que dispara evento
  dispararEvento(evento, dados) {
    // Implemente aqui
    // Deve disparar evento customizado
    // Deve passar dados para callbacks
  }
}

// EXERC√çCIO 6: Classe com m√©todos que usam 'this'
// TODO: Implementar classe que demonstra uso correto do 'this'
class Calculadora {
  constructor() {
    // Implemente aqui
    // Deve inicializar propriedades
  }

  // TODO: Implementar m√©todos que usam 'this'
  somar(a, b) {
    // Implemente aqui
    // Deve usar 'this' para acessar propriedades da classe
  }

  subtrair(a, b) {
    // Implemente aqui
    // Deve usar 'this' para acessar propriedades da classe
  }

  // TODO: Implementar m√©todo que retorna fun√ß√£o bound
  criarMetodoBound() {
    // Implemente aqui
    // Deve retornar m√©todo com contexto preservado
  }
}

// EXERC√çCIO 7: Fun√ß√£o que cria objetos com contexto
// TODO: Implementar factory function que preserva contexto
function criarObjetoComContexto() {
  // Implemente aqui
  // Deve criar objeto com m√©todos
  // Deve usar t√©cnicas para preservar contexto
  // Deve retornar objeto configurado
}

// EXERC√çCIO 8: Manipula√ß√£o avan√ßada de contexto
// TODO: Implementar fun√ß√£o que demonstra t√©cnicas avan√ßadas
function demonstrarTecnicasAvancadas() {
  // Implemente aqui
  // Deve demonstrar diferentes t√©cnicas de binding
  // Deve mostrar quando usar cada t√©cnica
  // Deve retornar exemplos pr√°ticos
}

// ========================================
// FUN√á√ïES AUXILIARES
// ========================================

// Fun√ß√£o para simular evento DOM
function simularEventoDOM(elemento, tipo, dados = {}) {
  const evento = new CustomEvent(tipo, { detail: dados });
  elemento.dispatchEvent(evento);
}

// Fun√ß√£o para criar elemento de teste
function criarElementoTeste() {
  const elemento = document.createElement('button');
  elemento.textContent = 'Clique aqui';
  elemento.id = 'botao-teste';
  return elemento;
}

// ========================================
// TESTES
// ========================================

function executarTestes() {
  console.log("üöÄ Iniciando testes de Contexto This...\n");

  try {
    // Teste 1: Contexto b√°sico
    console.log("Teste 1: Contexto b√°sico");
    const contexto = demonstrarContexto();
    console.log("‚úÖ Contexto demonstrado");
    console.log("");

    // Teste 2: Binding de m√©todos
    console.log("Teste 2: Binding de m√©todos");
    const metodoBound = criarMetodoComBind();
    console.log("‚úÖ M√©todo com bind criado");
    console.log("");

    // Teste 3: Call e Apply
    console.log("Teste 3: Call e Apply");
    const resultados = demonstrarCallApply();
    console.log("‚úÖ Call e Apply demonstrados");
    console.log("");

    // Teste 4: Arrow functions
    console.log("Teste 4: Arrow functions");
    const comparacao = compararArrowFunction();
    console.log("‚úÖ Compara√ß√£o de contextos");
    console.log("");

    // Teste 5: Gerenciador de eventos
    console.log("Teste 5: Gerenciador de eventos");
    const gerenciador = new GerenciadorEventos();
    const elemento = criarElementoTeste();
    
    gerenciador.adicionarListener('click', function() {
      console.log("‚úÖ Evento capturado com contexto correto");
    });
    
    gerenciador.dispararEvento('click', { dados: 'teste' });
    console.log("");

    // Teste 6: Calculadora
    console.log("Teste 6: Calculadora");
    const calculadora = new Calculadora();
    const resultado = calculadora.somar(5, 3);
    console.log("‚úÖ Resultado da soma:", resultado);
    console.log("");

    // Teste 7: Objeto com contexto
    console.log("Teste 7: Objeto com contexto");
    const objeto = criarObjetoComContexto();
    console.log("‚úÖ Objeto criado com contexto preservado");
    console.log("");

    // Teste 8: T√©cnicas avan√ßadas
    console.log("Teste 8: T√©cnicas avan√ßadas");
    const tecnicas = demonstrarTecnicasAvancadas();
    console.log("‚úÖ T√©cnicas avan√ßadas demonstradas");
    console.log("");

    console.log("üéâ Todos os testes passaram!");

  } catch (erro) {
    console.error("‚ùå Erro nos testes:", erro.message);
  }
}

// Executar testes se o arquivo for executado diretamente
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    demonstrarContexto,
    criarMetodoComBind,
    demonstrarCallApply,
    compararArrowFunction,
    GerenciadorEventos,
    Calculadora,
    criarObjetoComContexto,
    demonstrarTecnicasAvancadas
  };
} else {
  // Executar testes no navegador
  executarTestes();
} 