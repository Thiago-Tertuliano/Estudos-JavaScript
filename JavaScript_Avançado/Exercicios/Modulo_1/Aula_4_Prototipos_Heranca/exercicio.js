// ========================================
// EXERC√çCIO: Prot√≥tipos e Heran√ßa
// ========================================

/*
OBJETIVO: Entender e implementar heran√ßa prototipal em JavaScript

DESCRI√á√ÉO:
Voc√™ deve criar um sistema de gerenciamento de ve√≠culos usando heran√ßa prototipal.
O sistema deve demonstrar como funciona a cadeia de prot√≥tipos e como implementar
heran√ßa sem usar classes ES6.
O sistema deve incluir:
1. Construtores e prot√≥tipos
2. Heran√ßa prototipal
3. Sobrescrita de m√©todos
4. Verifica√ß√£o de inst√¢ncia
5. Composi√ß√£o de prot√≥tipos

REQUISITOS:
- Implementar todas as fun√ß√µes marcadas com TODO
- Usar heran√ßa prototipal adequadamente
- Evitar uso de classes ES6
- Seguir as especifica√ß√µes de cada fun√ß√£o
*/

// ========================================
// EXERC√çCIOS
// ========================================

// EXERC√çCIO 1: Construtor b√°sico e prot√≥tipo
// TODO: Implementar construtor Veiculo com prot√≥tipo
function Veiculo(marca, modelo, ano) {
  // Implemente aqui
  // Deve inicializar propriedades b√°sicas
  // Deve usar 'this' para definir propriedades
}

// TODO: Implementar m√©todos no prot√≥tipo de Veiculo
Veiculo.prototype.ligar = function() {
  // Implemente aqui
  // Deve retornar mensagem de liga√ß√£o
};

Veiculo.prototype.desligar = function() {
  // Implemente aqui
  // Deve retornar mensagem de desligamento
};

Veiculo.prototype.getInfo = function() {
  // Implemente aqui
  // Deve retornar informa√ß√µes formatadas do ve√≠culo
};

// EXERC√çCIO 2: Heran√ßa prototipal - Carro
// TODO: Implementar construtor Carro que herda de Veiculo
function Carro(marca, modelo, ano, portas) {
  // Implemente aqui
  // Deve chamar construtor pai
  // Deve adicionar propriedades espec√≠ficas
}

// TODO: Configurar heran√ßa prototipal
// Deve fazer Carro herdar de Veiculo
// Deve preservar construtor

// TODO: Implementar m√©todos espec√≠ficos do Carro
Carro.prototype.abrirPorta = function(numeroPorta) {
  // Implemente aqui
  // Deve retornar mensagem sobre abrir porta
};

Carro.prototype.getInfo = function() {
  // Implemente aqui
  // Deve sobrescrever m√©todo do pai
  // Deve incluir informa√ß√µes espec√≠ficas do carro
};

// EXERC√çCIO 3: Heran√ßa prototipal - Moto
// TODO: Implementar construtor Moto que herda de Veiculo
function Moto(marca, modelo, ano, cilindradas) {
  // Implemente aqui
  // Deve chamar construtor pai
  // Deve adicionar propriedades espec√≠ficas
}

// TODO: Configurar heran√ßa prototipal
// Deve fazer Moto herdar de Veiculo
// Deve preservar construtor

// TODO: Implementar m√©todos espec√≠ficos da Moto
Moto.prototype.empinar = function() {
  // Implemente aqui
  // Deve retornar mensagem sobre empinar
};

Moto.prototype.getInfo = function() {
  // Implemente aqui
  // Deve sobrescrever m√©todo do pai
  // Deve incluir informa√ß√µes espec√≠ficas da moto
};

// EXERC√çCIO 4: Heran√ßa m√∫ltipla com composi√ß√£o
// TODO: Implementar construtor Caminhao que herda de Veiculo
function Caminhao(marca, modelo, ano, capacidade) {
  // Implemente aqui
  // Deve chamar construtor pai
  // Deve adicionar propriedades espec√≠ficas
}

// TODO: Configurar heran√ßa prototipal
// Deve fazer Caminhao herdar de Veiculo
// Deve preservar construtor

// TODO: Implementar m√©todos espec√≠ficos do Caminhao
Caminhao.prototype.carregar = function(peso) {
  // Implemente aqui
  // Deve verificar se pode carregar o peso
  // Deve retornar mensagem apropriada
};

Caminhao.prototype.getInfo = function() {
  // Implemente aqui
  // Deve sobrescrever m√©todo do pai
  // Deve incluir informa√ß√µes espec√≠ficas do caminh√£o
};

// EXERC√çCIO 5: Verifica√ß√£o de inst√¢ncia e tipo
// TODO: Implementar fun√ß√£o que verifica tipo de ve√≠culo
function verificarTipoVeiculo(veiculo) {
  // Implemente aqui
  // Deve verificar se √© inst√¢ncia de cada tipo
  // Deve retornar string com o tipo
};

// TODO: Implementar fun√ß√£o que lista propriedades
function listarPropriedades(objeto) {
  // Implemente aqui
  // Deve retornar array com nomes das propriedades pr√≥prias
  // Deve incluir propriedades do prot√≥tipo
};

// EXERC√çCIO 6: Mixins e composi√ß√£o
// TODO: Implementar mixin para funcionalidade de GPS
const GPSMixin = {
  // Implemente aqui
  // Deve adicionar m√©todos relacionados a GPS
  // Deve incluir navegar(), obterLocalizacao(), etc.
};

// TODO: Implementar fun√ß√£o que aplica mixin
function aplicarMixin(objeto, mixin) {
  // Implemente aqui
  // Deve copiar m√©todos do mixin para o objeto
  // Deve preservar m√©todos existentes
};

// EXERC√çCIO 7: Heran√ßa profunda
// TODO: Implementar construtor CarroEsportivo que herda de Carro
function CarroEsportivo(marca, modelo, ano, portas, velocidadeMaxima) {
  // Implemente aqui
  // Deve chamar construtor pai (Carro)
  // Deve adicionar propriedades espec√≠ficas
}

// TODO: Configurar heran√ßa prototipal
// Deve fazer CarroEsportivo herdar de Carro
// Deve preservar construtor

// TODO: Implementar m√©todos espec√≠ficos
CarroEsportivo.prototype.acelerar = function() {
  // Implemente aqui
  // Deve retornar mensagem sobre acelera√ß√£o
};

CarroEsportivo.prototype.getInfo = function() {
  // Implemente aqui
  // Deve sobrescrever m√©todo do pai
  // Deve incluir informa√ß√µes espec√≠ficas do carro esportivo
};

// EXERC√çCIO 8: Utilit√°rios de prot√≥tipo
// TODO: Implementar fun√ß√£o que clona objeto
function clonarObjeto(objeto) {
  // Implemente aqui
  // Deve criar c√≥pia profunda do objeto
  // Deve preservar prot√≥tipos
};

// TODO: Implementar fun√ß√£o que estende prot√≥tipo
function estenderPrototipo(construtor, propriedades) {
  // Implemente aqui
  // Deve adicionar propriedades ao prot√≥tipo
  // Deve preservar m√©todos existentes
};

// ========================================
// FUN√á√ïES AUXILIARES
// ========================================

// Fun√ß√£o para verificar se objeto tem propriedade
function temPropriedade(objeto, propriedade) {
  return objeto.hasOwnProperty(propriedade);
}

// Fun√ß√£o para obter prot√≥tipo
function obterPrototipo(objeto) {
  return Object.getPrototypeOf(objeto);
}

// Fun√ß√£o para verificar cadeia de prot√≥tipos
function verificarCadeiaPrototipos(objeto) {
  const cadeia = [];
  let prototipo = objeto;
  
  while (prototipo) {
    cadeia.push(prototipo.constructor.name);
    prototipo = Object.getPrototypeOf(prototipo);
  }
  
  return cadeia;
}

// ========================================
// TESTES
// ========================================

function executarTestes() {
  console.log("üöÄ Iniciando testes de Prot√≥tipos e Heran√ßa...\n");

  try {
    // Teste 1: Construtor b√°sico
    console.log("Teste 1: Construtor b√°sico");
    const veiculo = new Veiculo("Toyota", "Corolla", 2020);
    console.log("‚úÖ Ve√≠culo criado:", veiculo.getInfo());
    console.log("‚úÖ Ligando ve√≠culo:", veiculo.ligar());
    console.log("");

    // Teste 2: Heran√ßa - Carro
    console.log("Teste 2: Heran√ßa - Carro");
    const carro = new Carro("Honda", "Civic", 2021, 4);
    console.log("‚úÖ Carro criado:", carro.getInfo());
    console.log("‚úÖ Abrindo porta:", carro.abrirPorta(1));
    console.log("‚úÖ Verificando heran√ßa:", carro instanceof Veiculo);
    console.log("");

    // Teste 3: Heran√ßa - Moto
    console.log("Teste 3: Heran√ßa - Moto");
    const moto = new Moto("Yamaha", "R1", 2022, 1000);
    console.log("‚úÖ Moto criada:", moto.getInfo());
    console.log("‚úÖ Empinando moto:", moto.empinar());
    console.log("‚úÖ Verificando heran√ßa:", moto instanceof Veiculo);
    console.log("");

    // Teste 4: Heran√ßa - Caminh√£o
    console.log("Teste 4: Heran√ßa - Caminh√£o");
    const caminhao = new Caminhao("Volvo", "FH16", 2020, 20000);
    console.log("‚úÖ Caminh√£o criado:", caminhao.getInfo());
    console.log("‚úÖ Carregando:", caminhao.carregar(15000));
    console.log("‚úÖ Verificando heran√ßa:", caminhao instanceof Veiculo);
    console.log("");

    // Teste 5: Verifica√ß√£o de tipo
    console.log("Teste 5: Verifica√ß√£o de tipo");
    console.log("‚úÖ Tipo do carro:", verificarTipoVeiculo(carro));
    console.log("‚úÖ Tipo da moto:", verificarTipoVeiculo(moto));
    console.log("‚úÖ Tipo do caminh√£o:", verificarTipoVeiculo(caminhao));
    console.log("");

    // Teste 6: Propriedades
    console.log("Teste 6: Propriedades");
    console.log("‚úÖ Propriedades do carro:", listarPropriedades(carro));
    console.log("‚úÖ Cadeia de prot√≥tipos:", verificarCadeiaPrototipos(carro));
    console.log("");

    // Teste 7: Mixin
    console.log("Teste 7: Mixin");
    aplicarMixin(carro, GPSMixin);
    console.log("‚úÖ GPS aplicado ao carro:", typeof carro.navegar);
    console.log("");

    // Teste 8: Heran√ßa profunda
    console.log("Teste 8: Heran√ßa profunda");
    const carroEsportivo = new CarroEsportivo("Ferrari", "F40", 1990, 2, 320);
    console.log("‚úÖ Carro esportivo criado:", carroEsportivo.getInfo());
    console.log("‚úÖ Acelerando:", carroEsportivo.acelerar());
    console.log("‚úÖ Verificando heran√ßa:", carroEsportivo instanceof Carro);
    console.log("‚úÖ Verificando heran√ßa profunda:", carroEsportivo instanceof Veiculo);
    console.log("");

    console.log("üéâ Todos os testes passaram!");

  } catch (erro) {
    console.error("‚ùå Erro nos testes:", erro.message);
  }
}

// Executar testes se o arquivo for executado diretamente
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    Veiculo,
    Carro,
    Moto,
    Caminhao,
    CarroEsportivo,
    verificarTipoVeiculo,
    listarPropriedades,
    GPSMixin,
    aplicarMixin,
    clonarObjeto,
    estenderPrototipo
  };
} else {
  // Executar testes no navegador
  executarTestes();
} 