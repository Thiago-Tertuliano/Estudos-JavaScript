// ========================================
// EXERC√çCIO: Programa√ß√£o Ass√≠ncrona
// ========================================

/*
OBJETIVO: Dominar o uso de Promises e Async/Await em JavaScript

DESCRI√á√ÉO:
Voc√™ deve criar um sistema de opera√ß√µes ass√≠ncronas usando Promises
e Async/Await para demonstrar como trabalhar com opera√ß√µes que
levam tempo para completar.
O sistema deve incluir:
1. Promises b√°sicas e avan√ßadas
2. Async/Await para c√≥digo limpo
3. Tratamento de erros ass√≠ncronos
4. Opera√ß√µes paralelas e sequenciais
5. Padr√µes avan√ßados (retry, timeout)
6. Simula√ß√£o de APIs e opera√ß√µes reais

REQUISITOS:
- Implementar todas as fun√ß√µes marcadas com TODO
- Usar Promises e Async/Await adequadamente
- Implementar tratamento de erros robusto
- Seguir as especifica√ß√µes de cada fun√ß√£o
*/

// ========================================
// EXERC√çCIOS
// ========================================

// EXERC√çCIO 1: Promises B√°sicas
// TODO: Implementar fun√ß√£o que retorna promise com delay
function esperar(ms) {
  // Implemente aqui
  // Deve retornar promise que resolve ap√≥s ms milissegundos
}

// TODO: Implementar fun√ß√£o que simula opera√ß√£o com sucesso/falha
function simularOperacao(sucesso = true, delay = 1000) {
  // Implemente aqui
  // Deve retornar promise que resolve ou rejeita baseado no par√¢metro sucesso
  // Deve usar delay especificado
}

// TODO: Implementar fun√ß√£o que processa dados assincronamente
function processarDados(dados, processador) {
  // Implemente aqui
  // Deve retornar promise que processa dados usando fun√ß√£o processador
  // Deve simular delay de processamento
}

// EXERC√çCIO 2: Async/Await B√°sico
// TODO: Implementar fun√ß√£o async que busca usu√°rio
async function buscarUsuario(id) {
  // Implemente aqui
  // Deve simular busca de usu√°rio em API
  // Deve usar await para opera√ß√£o ass√≠ncrona
  // Deve retornar dados do usu√°rio ou lan√ßar erro
}

// TODO: Implementar fun√ß√£o async que busca posts do usu√°rio
async function buscarPostsUsuario(usuarioId) {
  // Implemente aqui
  // Deve simular busca de posts em API
  // Deve usar await para opera√ß√£o ass√≠ncrona
  // Deve retornar array de posts
}

// TODO: Implementar fun√ß√£o async que carrega perfil completo
async function carregarPerfilCompleto(usuarioId) {
  // Implemente aqui
  // Deve buscar usu√°rio e posts em paralelo
  // Deve usar Promise.all para opera√ß√µes paralelas
  // Deve retornar objeto com usu√°rio e posts
}

// EXERC√çCIO 3: Tratamento de Erros
// TODO: Implementar fun√ß√£o com tratamento robusto de erros
async function buscarDadosComTratamento(url) {
  // Implemente aqui
  // Deve simular fetch com tratamento de erros
  // Deve verificar se resposta √© ok
  // Deve tratar erros de rede e parsing
}

// TODO: Implementar fun√ß√£o que tenta opera√ß√£o m√∫ltiplas vezes
async function tentarComRetry(operacao, maxTentativas = 3) {
  // Implemente aqui
  // Deve tentar opera√ß√£o at√© maxTentativas vezes
  // Deve usar delay exponencial entre tentativas
  // Deve retornar resultado da primeira tentativa bem-sucedida
}

// TODO: Implementar fun√ß√£o com timeout
function comTimeout(promise, ms) {
  // Implemente aqui
  // Deve adicionar timeout √† promise
  // Deve usar Promise.race para competi√ß√£o
  // Deve rejeitar com erro de timeout se demorar muito
}

// EXERC√çCIO 4: Opera√ß√µes Paralelas e Sequenciais
// TODO: Implementar fun√ß√£o que executa opera√ß√µes em paralelo
async function executarParalelo(operacoes) {
  // Implemente aqui
  // Deve executar array de opera√ß√µes em paralelo
  // Deve usar Promise.all
  // Deve retornar array com resultados
}

// TODO: Implementar fun√ß√£o que executa opera√ß√µes sequencialmente
async function executarSequencial(operacoes) {
  // Implemente aqui
  // Deve executar opera√ß√µes uma ap√≥s a outra
  // Deve usar for...of com await
  // Deve retornar array com resultados
}

// TODO: Implementar fun√ß√£o que processa dados em lotes
async function processarEmLotes(dados, tamanhoLote, processador) {
  // Implemente aqui
  // Deve processar dados em lotes de tamanhoLote
  // Deve executar lotes em paralelo
  // Deve retornar todos os resultados
}

// EXERC√çCIO 5: Padr√µes Avan√ßados
// TODO: Implementar fun√ß√£o de cache ass√≠ncrono
function criarCacheAssincrono() {
  // Implemente aqui
  // Deve retornar fun√ß√£o que cacheia resultados de opera√ß√µes
  // Deve usar Map para armazenar cache
  // Deve suportar expira√ß√£o de cache
}

// TODO: Implementar fun√ß√£o de throttle
function throttle(funcao, delay) {
  // Implemente aqui
  // Deve limitar execu√ß√£o da fun√ß√£o a uma vez por delay
  // Deve retornar promise que resolve com resultado
  // Deve cancelar execu√ß√µes anteriores
}

// TODO: Implementar fun√ß√£o de debounce
function debounce(funcao, delay) {
  // Implemente aqui
  // Deve atrasar execu√ß√£o da fun√ß√£o at√© que pare de ser chamada
  // Deve retornar promise que resolve com resultado
  // Deve cancelar execu√ß√µes anteriores
}

// EXERC√çCIO 6: Simula√ß√£o de APIs
// TODO: Implementar API simulada de usu√°rios
const apiUsuarios = {
  // TODO: Implementar m√©todo buscar
  async buscar(id) {
    // Implemente aqui
    // Deve simular busca de usu√°rio com delay
    // Deve retornar dados do usu√°rio ou erro
  },

  // TODO: Implementar m√©todo listar
  async listar() {
    // Implemente aqui
    // Deve simular listagem de usu√°rios com delay
    // Deve retornar array de usu√°rios
  },

  // TODO: Implementar m√©todo criar
  async criar(dados) {
    // Implemente aqui
    // Deve simular cria√ß√£o de usu√°rio com delay
    // Deve validar dados antes de criar
    // Deve retornar usu√°rio criado
  }
};

// TODO: Implementar API simulada de posts
const apiPosts = {
  // TODO: Implementar m√©todo buscar por usu√°rio
  async buscarPorUsuario(usuarioId) {
    // Implemente aqui
    // Deve simular busca de posts por usu√°rio
    // Deve retornar array de posts
  },

  // TODO: Implementar m√©todo criar
  async criar(dados) {
    // Implemente aqui
    // Deve simular cria√ß√£o de post
    // Deve validar dados obrigat√≥rios
    // Deve retornar post criado
  }
};

// EXERC√çCIO 7: Opera√ß√µes Complexas
// TODO: Implementar fun√ß√£o que sincroniza dados
async function sincronizarDados(usuarios, posts) {
  // Implemente aqui
  // Deve sincronizar dados de usu√°rios e posts
  // Deve buscar dados em paralelo
  // Deve combinar e validar dados
  // Deve retornar dados sincronizados
}

// TODO: Implementar fun√ß√£o que processa upload de arquivos
async function processarUpload(arquivos) {
  // Implemente aqui
  // Deve simular upload de m√∫ltiplos arquivos
  // Deve processar arquivos em paralelo
  // Deve retornar progresso e resultados
}

// TODO: Implementar fun√ß√£o que valida dados assincronamente
async function validarDadosAssincronamente(dados, validadores) {
  // Implemente aqui
  // Deve executar m√∫ltiplos validadores em paralelo
  // Deve retornar array com resultados de valida√ß√£o
  // Deve agrupar erros e sucessos
}

// EXERC√çCIO 8: Utilit√°rios Avan√ßados
// TODO: Implementar fun√ß√£o que converte callback para promise
function promisificar(funcao) {
  // Implemente aqui
  // Deve converter fun√ß√£o com callback para promise
  // Deve suportar fun√ß√µes com padr√£o (erro, resultado)
  // Deve retornar fun√ß√£o que retorna promise
}

// TODO: Implementar fun√ß√£o que cria promise que resolve/rejeita
function criarPromiseResolvida(valor) {
  // Implemente aqui
  // Deve retornar promise j√° resolvida com valor
}

function criarPromiseRejeitada(erro) {
  // Implemente aqui
  // Deve retornar promise j√° rejeitada com erro
}

// TODO: Implementar fun√ß√£o que aguarda m√∫ltiplas promises
async function aguardarTodas(promises) {
  // Implemente aqui
  // Deve aguardar todas as promises
  // Deve retornar array com resultados
  // Deve tratar erros individuais
}

// ========================================
// DADOS DE EXEMPLO
// ========================================

const usuariosExemplo = [
  { id: 1, nome: "Jo√£o Silva", email: "joao@email.com", ativo: true },
  { id: 2, nome: "Maria Santos", email: "maria@email.com", ativo: true },
  { id: 3, nome: "Pedro Costa", email: "pedro@email.com", ativo: false }
];

const postsExemplo = [
  { id: 1, titulo: "Primeiro Post", conteudo: "Conte√∫do do post", usuarioId: 1 },
  { id: 2, titulo: "Segundo Post", conteudo: "Outro conte√∫do", usuarioId: 1 },
  { id: 3, titulo: "Post da Maria", conteudo: "Post da Maria", usuarioId: 2 }
];

// ========================================
// FUN√á√ïES AUXILIARES
// ========================================

// Fun√ß√£o para simular delay
function simularDelay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Fun√ß√£o para simular erro
function simularErro(mensagem, delay = 1000) {
  return new Promise((_, reject) => {
    setTimeout(() => reject(new Error(mensagem)), delay);
  });
}

// Fun√ß√£o para simular opera√ß√£o com sucesso
function simularSucesso(dados, delay = 1000) {
  return new Promise(resolve => {
    setTimeout(() => resolve(dados), delay);
  });
}

// ========================================
// TESTES
// ========================================

async function executarTestes() {
  console.log("üöÄ Iniciando testes de Programa√ß√£o Ass√≠ncrona...\n");

  try {
    // Teste 1: Promises b√°sicas
    console.log("Teste 1: Promises b√°sicas");
    await esperar(100);
    console.log("‚úÖ Espera implementada");
    
    const resultado = await simularOperacao(true, 100);
    console.log("‚úÖ Opera√ß√£o simulada:", resultado);
    
    const dadosProcessados = await processarDados([1, 2, 3], x => x * 2);
    console.log("‚úÖ Dados processados:", dadosProcessados);
    console.log("");

    // Teste 2: Async/Await b√°sico
    console.log("Teste 2: Async/Await b√°sico");
    const usuario = await buscarUsuario(1);
    console.log("‚úÖ Usu√°rio buscado:", usuario.nome);
    
    const posts = await buscarPostsUsuario(1);
    console.log("‚úÖ Posts buscados:", posts.length);
    
    const perfil = await carregarPerfilCompleto(1);
    console.log("‚úÖ Perfil completo carregado");
    console.log("");

    // Teste 3: Tratamento de erros
    console.log("Teste 3: Tratamento de erros");
    const dadosComTratamento = await buscarDadosComTratamento("https://api.exemplo.com/dados");
    console.log("‚úÖ Busca com tratamento implementada");
    
    const resultadoRetry = await tentarComRetry(() => simularOperacao(true), 2);
    console.log("‚úÖ Retry implementado:", resultadoRetry);
    
    const resultadoTimeout = await comTimeout(simularSucesso("dados"), 500);
    console.log("‚úÖ Timeout implementado:", resultadoTimeout);
    console.log("");

    // Teste 4: Opera√ß√µes paralelas e sequenciais
    console.log("Teste 4: Opera√ß√µes paralelas e sequenciais");
    const operacoes = [
      () => simularSucesso("a"),
      () => simularSucesso("b"),
      () => simularSucesso("c")
    ];
    
    const resultadosParalelo = await executarParalelo(operacoes);
    console.log("‚úÖ Opera√ß√µes paralelas:", resultadosParalelo.length);
    
    const resultadosSequencial = await executarSequencial(operacoes);
    console.log("‚úÖ Opera√ß√µes sequenciais:", resultadosSequencial.length);
    
    const lotes = await processarEmLotes([1, 2, 3, 4, 5], 2, async x => x * 2);
    console.log("‚úÖ Processamento em lotes:", lotes.length);
    console.log("");

    // Teste 5: Padr√µes avan√ßados
    console.log("Teste 5: Padr√µes avan√ßados");
    const cache = criarCacheAssincrono();
    console.log("‚úÖ Cache ass√≠ncrono criado");
    
    const throttle = throttle(() => simularSucesso("throttle"), 1000);
    console.log("‚úÖ Throttle implementado");
    
    const debounce = debounce(() => simularSucesso("debounce"), 1000);
    console.log("‚úÖ Debounce implementado");
    console.log("");

    // Teste 6: APIs simuladas
    console.log("Teste 6: APIs simuladas");
    const usuarioAPI = await apiUsuarios.buscar(1);
    console.log("‚úÖ API usu√°rios - busca:", usuarioAPI.nome);
    
    const postsAPI = await apiPosts.buscarPorUsuario(1);
    console.log("‚úÖ API posts - busca por usu√°rio:", postsAPI.length);
    console.log("");

    // Teste 7: Opera√ß√µes complexas
    console.log("Teste 7: Opera√ß√µes complexas");
    const dadosSincronizados = await sincronizarDados(usuariosExemplo, postsExemplo);
    console.log("‚úÖ Dados sincronizados");
    
    const upload = await processarUpload(["arquivo1.txt", "arquivo2.txt"]);
    console.log("‚úÖ Upload processado");
    console.log("");

    // Teste 8: Utilit√°rios
    console.log("Teste 8: Utilit√°rios");
    const promiseResolvida = criarPromiseResolvida("sucesso");
    console.log("‚úÖ Promise resolvida criada");
    
    const todas = await aguardarTodas([
      simularSucesso("a"),
      simularSucesso("b"),
      simularSucesso("c")
    ]);
    console.log("‚úÖ Aguardar todas implementado:", todas.length);
    console.log("");

    console.log("üéâ Todos os testes passaram!");

  } catch (erro) {
    console.error("‚ùå Erro nos testes:", erro.message);
  }
}

// Executar testes se o arquivo for executado diretamente
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    esperar,
    simularOperacao,
    processarDados,
    buscarUsuario,
    buscarPostsUsuario,
    carregarPerfilCompleto,
    buscarDadosComTratamento,
    tentarComRetry,
    comTimeout,
    executarParalelo,
    executarSequencial,
    processarEmLotes,
    criarCacheAssincrono,
    throttle,
    debounce,
    apiUsuarios,
    apiPosts,
    sincronizarDados,
    processarUpload,
    validarDadosAssincronamente,
    promisificar,
    criarPromiseResolvida,
    criarPromiseRejeitada,
    aguardarTodas
  };
} else {
  // Executar testes no navegador
  executarTestes();
} 